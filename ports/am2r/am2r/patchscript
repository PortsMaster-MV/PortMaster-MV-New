#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
LOGERR="$GAMEDIR/patch_error.txt"

# Redirect output and error to the log file
rm -rf $LOGFILE $LOGERR
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="am2r.port"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

PYTHON=$(which python3)

# Permissions
chmod 666 /dev/uinput

cd "$GAMEDIR"

unzip_archives() {
    # Create am2r and am2rlauncher folders
    mkdir -p "$DATADIR/am2r" && mkdir -p "$DATADIR/am2rpatch"

    # Identify AM2R zip (has data.win in root)
    AM2R_ZIP=$(find "$DATADIR" -maxdepth 1 -type f -name "*.zip" -exec sh -c 'unzip -l "{}" | grep -q "^ *[0-9]\+ *[0-9-]\+ *[0-9:]\+ *data\.win$" && echo "{}"' \;)

    # Identify autopatcher zip (has AM2R-Autopatcher-Windows-master/data/ folder)
    AUTOPATCHER_ZIP=$(find "$DATADIR" -maxdepth 1 -type f -name "*.zip" -exec sh -c 'unzip -l "{}" | grep -q "AM2R-Autopatcher-Windows-master/data/$" && echo "{}"' \;)

    # Check if AM2R zip was found
    if [ -z "$AM2R_ZIP" ]; then
        echo "Error: No valid AM2R zip file found in $DATADIR (must have data.win in root)."
        mv $LOGFILE $LOGERR
        exit 1
    fi

    # Check if autopatcher zip was found
    if [ -z "$AUTOPATCHER_ZIP" ]; then
        echo "========================================================"
        echo "Unable to find community update zip. Proceeding without."
        echo "========================================================"
        USEPATCH=0
    else
        USEPATCH=1
    fi

    # Unzip AM2R zip to its folder
    unzip "$AM2R_ZIP" -d "$DATADIR/am2r"

    if [ "$USEPATCH" == 1 ]; then
        # Unzip autopatcher zip to its folder
        unzip "$AUTOPATCHER_ZIP" -d "$DATADIR/am2rpatch"
    fi
}

prepare_files() {
    # AM2R: Delete unnecessary files
    rm -rf  $DATADIR/am2r/*.exe $DATADIR/am2r/*.dll \
            $DATADIR/.gitkeep $DATADIR/am2r/*.txt 
    echo "Removed unnecessary files"
    
    if [ "$USEPATCH" == 1 ]; then
        # AM2RPATCH: Move files
        echo "Moving patch files to $DATADIR/am2r"
        rsync -a "$DATADIR/am2rpatch/AM2R-Autopatcher-Windows-master/data/files_to_copy/"* "$DATADIR/am2r/"
        rsync -a "$DATADIR/am2rpatch/AM2R-Autopatcher-Windows-master/data/HDR_HQ_in-game_music/"* "$DATADIR/am2r/"
        DATA="$DATADIR/am2r/data.win"
        PATCH="$DATADIR/am2rpatch/AM2R-Autopatcher-Windows-master/data/data.xdelta"
        
        # Try applying xdelta
        echo "Attempting to apply xdelta patch"
        apply_xdelta
        
        # AM2R: Edit options.ini
        if [ -f "$DATADIR/am2r/options.ini" ]; then
            sed -i 's/CreateTexturesOnDemand=0/CreateTexturesOnDemand=1/' "$DATADIR/am2r/options.ini"
        else
            echo "Error: options.ini missing!"
            mv $LOGFILE $LOGERR
            exit 1
        fi
    else
        mv "$DATADIR/am2r/data.win" "$DATADIR/am2r/game.droid"
    fi
    
    # Move everything up to assets
    mv $DATADIR/am2r/* $DATADIR
    rm -rf $DATADIR/am2r
    sleep 1
}

apply_xdelta() {
    # Check if the data.win file exists and apply xdelta
    if [ -f "$DATADIR/am2r/data.win" ]; then
        output=$($controlfolder/xdelta3 -d -s "$DATA" -f "$PATCH" "$DATADIR/game.droid" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Patch applied successfully"
            echo "$output"
            rm -rf "$DATA" && rm -rf "$DATADIR/am2rpatch"
        else
            # If this happens, it's not AM2R 1.1
            echo "Failed to apply patch"
            echo "$output"
            mv $LOGFILE $LOGERR
            exit 1
        fi
    else
        # This shouldn't be reachable, but we'll do a safety check anyway
        echo "No data.win file found to patch!"
        mv $LOGFILE $LOGERR
        exit 1
    fi
}

zip_archive() {
        echo "Finishing up..."
        rm -rf $AM2R_ZIP
        if [ "$USE_PATCH" == 1 ]; then
            rm -rf $AUTOPATCHER_ZIP
        fi
        zip -r -0 $DATAFILE ./assets/
        rm -rf $DATADIR/*
        sleep 1
}

process_game() {
    unzip_archives
    prepare_files
    zip_archive
	
    # Final completion message
    echo "Patching process complete!"
}

process_game
