#!/bin/bash

# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/tools/otrlog.txt"

# Redirect output and error to the log file
rm -rf $LOGFILE
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Function handle the ROM file.
process_rom() {
    cd $GAMEDIR/tools
    local input_file="$1"
    if [[ ! -f "../$input_file" ]]; then
        echo "Error: File $input_file not found!"
        exit 1
    fi

    # Run the extraction
    echo "Extracting data from $input_file..."
    if ./torch o2r "../$input_file" >/dev/null 2>&1; then
        echo "Extraction complete. O2R generated."
        mv sf64.o2r ../sf64.o2r
        rm -rf ../*.*64
    else
        echo "Error: Extraction failed for $input_file."
        exit 1
    fi
    cd $GAMEDIR
}

# Function to convert N64 ROM to Z64 format
convert_n64() {
    local rom_file="$1"
    local output_file="rom.z64"

    if [[ ! -f "$rom_file" ]]; then
        echo "Error: File $rom_file not found!"
        return 1
    fi

    # Read the first 4 bytes of the file
    word=$(hexdump -n 4 -e '4/1 "%02x"' "$rom_file")

    case "$word" in
        "37804012")
            echo "Detected Big Endian format. Converting to Z64..."
            dd if="$rom_file" of="$output_file" conv=swab 2>/dev/null || return 1
            ;;
        "40123780")
            echo "Detected Little Endian format. Converting to Z64..."
            dd if="$rom_file" of="$output_file" conv=swab,notrunc bs=4 2>/dev/null || return 1
            ;;
        "80371240")
            echo "ROM already uses Z64 byte ordering. Copying as-is."
            cp "$rom_file" "$output_file" || return 1
            ;;
        *)
            echo "Error: Format identification failed for $rom_file."
            return 1
            ;;
    esac

    echo "Conversion complete. Saved as $output_file."
}

# Main Logic
find_rom() {
    find . -maxdepth 1 \( -name "*.z64" -o -name "*.n64" \) -print -quit
}

rom_file=$(find_rom)

if [[ -z "$rom_file" ]]; then
    echo "No ROM file (*.z64 or *.n64) found in the current directory."
    sleep 2
    exit 1
fi

echo "Processing $rom_file..."
if [[ "$rom_file" == *.n64 ]]; then
    if convert_n64 "$rom_file"; then
        process_rom "rom.z64"
    else
        echo "Error: Conversion failed. Exiting."
        sleep 2
        exit 1
    fi
else
    mv "$rom_file" "rom.z64" || exit 1
    process_rom "rom.z64"
fi

# Cleanup
echo "Cleaning up temporary files..."
rm -f ./placeholder
echo "Patching process complete!"